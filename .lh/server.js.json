{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1748449876827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748449887435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,9 +364,9 @@\n   }\r\n });\r\n \r\n // ============================\r\n-// \\ud83d\\uded1 RUTA 404 - P\\u00c1GINA NO ENCONTRADA\r\n+// RUTA 404 - P\\u00c1GINA NO ENCONTRADA\r\n // ============================\r\n app.use((req, res) => {\r\n   res.status(404).render('404', {\r\n     title: 'P\\u00e1gina no encontrada',\r\n@@ -374,9 +374,9 @@\n   });\r\n });\r\n \r\n // ============================\r\n-// \\ud83d\\udcbb INICIAR SERVIDOR\r\n+// INICIAR SERVIDOR\r\n // ============================\r\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n   console.log(`Servidor escuchando en http://localhost:${PORT}`);\r\n"
                },
                {
                    "date": 1748449893251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,9 +364,9 @@\n   }\r\n });\r\n \r\n // ============================\r\n-// RUTA 404 - P\\u00c1GINA NO ENCONTRADA\r\n+// RUTA 404 - P\r\n // ============================\r\n app.use((req, res) => {\r\n   res.status(404).render('404', {\r\n     title: 'P\\u00e1gina no encontrada',\r\n"
                },
                {
                    "date": 1748449915815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n   saveUninitialized: false\r\n }));\r\n \r\n // ============================\r\n-// \\ud83d\\udd01 RUTAS\r\n+//  RUTAS\r\n // ============================\r\n \r\n // RUTA RA\\u00cdZ: SIEMPRE REDIRIGE A BIENVENIDO\r\n app.get('/', (req, res) => {\r\n@@ -364,9 +364,9 @@\n   }\r\n });\r\n \r\n // ============================\r\n-// RUTA 404 - P\r\n+// RUTA 404 - Paguina No Encontrada\r\n // ============================\r\n app.use((req, res) => {\r\n   res.status(404).render('404', {\r\n     title: 'P\\u00e1gina no encontrada',\r\n"
                },
                {
                    "date": 1748449926414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n   return usuarios.length > 0 ? usuarios[0] : null;\r\n }\r\n \r\n // ============================\r\n-// \\ud83d\\ude80 CREACI\\u00d3N DEL SERVIDOR\r\n+//  CREACI\\u00d3N DEL SERVIDOR\r\n // ============================\r\n const app = express();\r\n \r\n app.set('view engine', 'ejs');\r\n@@ -74,9 +74,9 @@\n // ============================\r\n //  RUTAS\r\n // ============================\r\n \r\n-// RUTA RA\\u00cdZ: SIEMPRE REDIRIGE A BIENVENIDO\r\n+//  SIEMPRE REDIRIGE A BIENVENIDO\r\n app.get('/', (req, res) => {\r\n   res.redirect('/bienvenido');\r\n });\r\n \r\n"
                },
                {
                    "date": 1748449933099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n   return usuarios.length > 0 ? usuarios[0] : null;\r\n }\r\n \r\n // ============================\r\n-//  CREACI\\u00d3N DEL SERVIDOR\r\n+//  CREACIon \r\n // ============================\r\n const app = express();\r\n \r\n app.set('view engine', 'ejs');\r\n"
                },
                {
                    "date": 1748449941697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n   return usuarios.length > 0 ? usuarios[0] : null;\r\n }\r\n \r\n // ============================\r\n-//  CREACIon \r\n+//  CREACIon DE LA APLICACIN EXPRESS\r\n // ============================\r\n const app = express();\r\n \r\n app.set('view engine', 'ejs');\r\n"
                },
                {
                    "date": 1748449948220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n   return usuarios.length > 0 ? usuarios[0] : null;\r\n }\r\n \r\n // ============================\r\n-//  CREACIon DE LA APLICACIN EXPRESS\r\n+//  CREACIon DE LA APLICACION EXPRESS\r\n // ============================\r\n const app = express();\r\n \r\n app.set('view engine', 'ejs');\r\n"
                },
                {
                    "date": 1748449955101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     });\r\n }\r\n \r\n // ============================\r\n-// \\ud83d\\udccb FUNCIONES DE USUARIO\r\n+// FUNCIONES DE USUARIO\r\n // ============================\r\n async function verificarCorreo(correo) {\r\n   const usuarios = await query('SELECT * FROM usuarios WHERE correo = ?', [correo]);\r\n   return usuarios.length > 0;\r\n@@ -54,9 +54,9 @@\n   return usuarios.length > 0 ? usuarios[0] : null;\r\n }\r\n \r\n // ============================\r\n-//  CREACIon DE LA APLICACION EXPRESS\r\n+//  CREACION DE LA APLICACION EXPRESS\r\n // ============================\r\n const app = express();\r\n \r\n app.set('view engine', 'ejs');\r\n"
                },
                {
                    "date": 1748449961859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n const mysql = require('mysql2');\r\n const session = require('express-session');\r\n \r\n // ============================\r\n-// \\u2699\\ufe0f CONFIGURACI\\u00d3N DE BASE DE DATOS\r\n+// CONFI\r\n // ============================\r\n const pool = mysql.createPool({\r\n   host: process.env.DB_HOST || 'localhost',\r\n   user: process.env.DB_USER || 'root',\r\n"
                },
                {
                    "date": 1748449972081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n // ============================\r\n-// \\ud83d\\udce6 IMPORTACIONES Y CONFIGURACI\\u00d3N INICIAL\r\n+// IMPO\r\n // ============================\r\n const express = require('express');\r\n const path = require('path');\r\n const mysql = require('mysql2');\r\n const session = require('express-session');\r\n \r\n // ============================\r\n-// CONFI\r\n+// CONFIGURACION DE LA BASE DE DATOS\r\n // ============================\r\n const pool = mysql.createPool({\r\n   host: process.env.DB_HOST || 'localhost',\r\n   user: process.env.DB_USER || 'root',\r\n"
                },
                {
                    "date": 1748449978243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n // ============================\r\n-// IMPO\r\n+// IMPORTACIONES NECESARIAS\r\n // ============================\r\n const express = require('express');\r\n const path = require('path');\r\n const mysql = require('mysql2');\r\n"
                },
                {
                    "date": 1748450516438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,10 @@\n-// ============================\r\n-// IMPORTACIONES NECESARIAS\r\n-// ============================\r\n const express = require('express');\r\n const path = require('path');\r\n const mysql = require('mysql2');\r\n const session = require('express-session');\r\n \r\n-// ============================\r\n-// CONFIGURACION DE LA BASE DE DATOS\r\n-// ============================\r\n+// ConfiguraciÃ³n BD\r\n const pool = mysql.createPool({\r\n   host: process.env.DB_HOST || 'localhost',\r\n   user: process.env.DB_USER || 'root',\r\n   password: process.env.DB_PASSWORD || '',\r\n@@ -19,45 +14,30 @@\n   waitForConnections: true,\r\n   queueLimit: 0,\r\n });\r\n \r\n-pool.on('error', (err) => {\r\n-  console.error('Error en la conexi\\u00f3n a la base de datos:', err.code, err.message);\r\n-});\r\n-\r\n function query(sql, params = []) {\r\n-  return pool.promise().query(sql, params)\r\n-    .then(([results]) => results)\r\n-    .catch((err) => {\r\n-      console.error('Error en consulta SQL:', err.message);\r\n-      throw err;\r\n-    });\r\n+  return pool.promise().query(sql, params).then(([results]) => results);\r\n }\r\n \r\n-// ============================\r\n-// FUNCIONES DE USUARIO\r\n-// ============================\r\n+// Funciones usuario\r\n async function verificarCorreo(correo) {\r\n   const usuarios = await query('SELECT * FROM usuarios WHERE correo = ?', [correo]);\r\n   return usuarios.length > 0;\r\n }\r\n \r\n async function registrarUsuario({ nombre, direccion, telefono, correo, password }) {\r\n   await query(\r\n-    `INSERT INTO usuarios (nombre, direccion, telefono, correo, password)\r\n-     VALUES (?, ?, ?, ?, ?)`,\r\n+    `INSERT INTO usuarios (nombre, direccion, telefono, correo, password) VALUES (?, ?, ?, ?, ?)`,\r\n     [nombre, direccion, telefono, correo, password]\r\n   );\r\n }\r\n \r\n async function loginUsuario(correo, password) {\r\n   const usuarios = await query('SELECT * FROM usuarios WHERE correo = ? AND password = ?', [correo, password]);\r\n-  return usuarios.length > 0 ? usuarios[0] : null;\r\n+  return usuarios.length ? usuarios[0] : null;\r\n }\r\n \r\n-// ============================\r\n-//  CREACION DE LA APLICACION EXPRESS\r\n-// ============================\r\n const app = express();\r\n \r\n app.set('view engine', 'ejs');\r\n app.set('views', path.join(__dirname, 'views'));\r\n@@ -70,314 +50,135 @@\n   resave: false,\r\n   saveUninitialized: false\r\n }));\r\n \r\n-// ============================\r\n-//  RUTAS\r\n-// ============================\r\n+// Rutas\r\n \r\n-//  SIEMPRE REDIRIGE A BIENVENIDO\r\n-app.get('/', (req, res) => {\r\n-  res.redirect('/bienvenido');\r\n-});\r\n+app.get('/', (req, res) => res.redirect('/bienvenido'));\r\n \r\n-// RUTA DE BIENVENIDA: MUESTRA OPCIONES BASADAS EN AUTENTICACI\\u00d3N\r\n app.get('/bienvenido', (req, res) => {\r\n-  res.render('Bienvenido', {\r\n-    title: 'Bienvenido',\r\n-    user: req.session.user || null,\r\n-  });\r\n+  if (!req.session.user) return res.redirect('/login');\r\n+  res.render('Bienvenido', { title: 'Bienvenido', user: req.session.user });\r\n });\r\n \r\n-app.get('/bienvenido', (req, res) => {\r\n-  if (!req.session.user) {\r\n-    return res.redirect('/login');\r\n-  }\r\n-  res.render('Bienvenido', {\r\n-    title: 'Bienvenido',\r\n-    user: req.session.user\r\n-  });\r\n-});\r\n-\r\n app.get('/login', (req, res) => {\r\n-  res.render('Login', {\r\n-    title: 'Login',\r\n-    error: null,\r\n-    success: req.query.success || null\r\n-  });\r\n+  res.render('Login', { title: 'Login', error: null, success: req.query.success || null });\r\n });\r\n \r\n app.post('/login', async (req, res) => {\r\n   const { correo, password } = req.body;\r\n-\r\n   if (!correo || !password) {\r\n-    return res.render('Login', {\r\n-      title: 'Login',\r\n-      error: 'Por favor, completa todos los campos.',\r\n-      success: null\r\n-    });\r\n+    return res.render('Login', { title: 'Login', error: 'Completa todos los campos.', success: null });\r\n   }\r\n-\r\n   try {\r\n     const usuario = await loginUsuario(correo, password);\r\n     if (usuario) {\r\n       req.session.user = usuario;\r\n       return res.redirect('/menu');\r\n-    } else {\r\n-      return res.render('Login', {\r\n-        title: 'Login',\r\n-        error: 'El usuario no est\\u00e1 registrado. Por favor, reg\\u00edstrate.',\r\n-        success: null\r\n-      });\r\n     }\r\n-  } catch (err) {\r\n-    console.error('Error en login:', err);\r\n-    return res.render('Login', {\r\n-      title: 'Login',\r\n-      error: 'Error del servidor. Intenta m\\u00e1s tarde.',\r\n-      success: null\r\n-    });\r\n+    res.render('Login', { title: 'Login', error: 'Usuario no registrado.', success: null });\r\n+  } catch {\r\n+    res.render('Login', { title: 'Login', error: 'Error del servidor.', success: null });\r\n   }\r\n });\r\n \r\n app.get('/registro', (req, res) => {\r\n-  res.render('crearCuenta', {\r\n-    title: 'Registro',\r\n-    error: null\r\n-  });\r\n+  res.render('crearCuenta', { title: 'Registro', error: null });\r\n });\r\n \r\n app.post('/registro', async (req, res) => {\r\n   const { nombre, direccion, telefono, correo, password } = req.body;\r\n-\r\n   if (!nombre || !direccion || !telefono || !correo || !password) {\r\n-    return res.render('crearCuenta', {\r\n-      title: 'Registro',\r\n-      error: 'Por favor, completa todos los campos.'\r\n-    });\r\n+    return res.render('crearCuenta', { title: 'Registro', error: 'Completa todos los campos.' });\r\n   }\r\n-\r\n   try {\r\n-    const existe = await verificarCorreo(correo);\r\n-    if (existe) {\r\n-      return res.render('crearCuenta', {\r\n-        title: 'Registro',\r\n-        error: 'Este correo ya est\\u00e1 registrado.'\r\n-      });\r\n+    if (await verificarCorreo(correo)) {\r\n+      return res.render('crearCuenta', { title: 'Registro', error: 'Correo ya registrado.' });\r\n     }\r\n-\r\n     await registrarUsuario({ nombre, direccion, telefono, correo, password });\r\n-\r\n-    const nuevoUsuario = await loginUsuario(correo, password);\r\n-    req.session.user = nuevoUsuario;\r\n-\r\n-    return res.redirect('/menu');\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.render('crearCuenta', {\r\n-      title: 'Registro',\r\n-      error: 'Error en el servidor. Int\\u00e9ntalo m\\u00e1s tarde.'\r\n-    });\r\n+    req.session.user = await loginUsuario(correo, password);\r\n+    res.redirect('/menu');\r\n+  } catch {\r\n+    res.render('crearCuenta', { title: 'Registro', error: 'Error en el servidor.' });\r\n   }\r\n });\r\n \r\n app.get('/menu', (req, res) => {\r\n-  if (!req.session.user) {\r\n-    return res.redirect('/login?error=Debes+iniciar+sesion+primero');\r\n-  }\r\n-\r\n-  res.render('menu', {\r\n-    title: 'Men\\u00fa Principal',\r\n-    user: req.session.user\r\n-  });\r\n+  if (!req.session.user) return res.redirect('/login?error=Debes iniciar sesiÃ³n primero');\r\n+  res.render('menu', { title: 'MenÃº Principal', user: req.session.user });\r\n });\r\n \r\n app.get('/logout', (req, res) => {\r\n-  req.session.destroy(() => {\r\n-    res.redirect('/login');\r\n-  });\r\n+  req.session.destroy(() => res.redirect('/login'));\r\n });\r\n \r\n app.get('/acerca_del_albergue', (req, res) => {\r\n-  res.render('AcercaDelAlbergue', {\r\n-    title: 'Acerca del Albergue',\r\n-    user: req.session.user || null\r\n-  });\r\n+  res.render('AcercaDelAlbergue', { title: 'Acerca del Albergue', user: req.session.user || null });\r\n });\r\n \r\n-app.get('/infoAdopcion', (req, res) => {\r\n-  res.render('InfoAdopcion', {\r\n-    title: 'Informaci\\u00f3n sobre Adopciones',\r\n-    user: req.session.user || null\r\n-  });\r\n+app.get('/infoAdopciones', (req, res) => {\r\n+  res.render('InfoAdopciones', { title: 'InformaciÃ³n sobre Adopciones', user: req.session.user || null });\r\n });\r\n \r\n app.get('/infoDonaciones', (req, res) => {\r\n-  res.render('InfoDonaciones', {\r\n-    title: 'Informaci\\u00f3n sobre Donaciones',\r\n-    user: req.session.user || null\r\n-  });\r\n+  res.render('InfoDonaciones', { title: 'InformaciÃ³n sobre Donaciones', user: req.session.user || null });\r\n });\r\n \r\n-// MOSTRAR FORMULARIO DE REPORTE\r\n-app.get('/FormularioReporte', (req, res) => {\r\n-  res.render('FormularioReporte', {\r\n-    title: 'Formulario de Reportes',\r\n-    user: req.session.user || null,\r\n-    error: null,\r\n-    success: null,\r\n-    formData: {}\r\n-  });\r\n+// Formulario Reportes\r\n+app.get('/FormularioReportes', (req, res) => {\r\n+  res.render('FormularioReportes', { title: 'Formulario de Reportes', user: req.session.user || null, error: null, success: null, formData: {} });\r\n });\r\n \r\n-// RUTA PARA MOSTRAR LOS PERROS DESDE LA BASE DE DATOS\r\n+// Lista perros\r\n app.get('/perros', async (req, res) => {\r\n   try {\r\n     const perros = await query('SELECT * FROM perros');\r\n-\r\n-    res.render('Perros', {\r\n-      title: 'Nuestros Perros',\r\n-      user: req.session.user || null,\r\n-      perros\r\n-    });\r\n-  } catch (err) {\r\n-    console.error('Error al obtener los perros:', err);\r\n-    res.status(500).render('Perros', {\r\n-      title: 'Nuestros Perros',\r\n-      user: req.session.user || null,\r\n-      perros: [],\r\n-      error: 'No se pudieron cargar los perros.'\r\n-    });\r\n+    res.render('Perros', { title: 'Nuestros Perros', user: req.session.user || null, perros });\r\n+  } catch {\r\n+    res.status(500).render('Perros', { title: 'Nuestros Perros', user: req.session.user || null, perros: [], error: 'No se pudieron cargar los perros.' });\r\n   }\r\n });\r\n \r\n-// RUTA PARA MOSTRAR DETALLES DE UN PERRO EN DETALLESPERROS.EJS\r\n+// Detalles perro\r\n app.get('/perros/:id', async (req, res) => {\r\n-  const { id } = req.params;\r\n-\r\n   try {\r\n-    const [perro] = await query('SELECT * FROM perros WHERE id = ?', [id]);\r\n-\r\n-    if (!perro) {\r\n-      return res.status(404).render('404', {\r\n-        title: 'Perro no encontrado',\r\n-        user: req.session.user || null\r\n-      });\r\n-    }\r\n-\r\n-    res.render('DetallesPerros', {\r\n-      title: `Detalles de ${perro.nombre}`,\r\n-      user: req.session.user || null,\r\n-      perro\r\n-    });\r\n-  } catch (err) {\r\n-    console.error('Error al obtener detalles del perro:', err);\r\n-    res.status(500).render('DetallesPerros', {\r\n-      title: 'Error al cargar detalles',\r\n-      user: req.session.user || null,\r\n-      perro: null,\r\n-      error: 'No se pudieron cargar los detalles del perro.'\r\n-    });\r\n+    const [perro] = await query('SELECT * FROM perros WHERE id = ?', [req.params.id]);\r\n+    if (!perro) return res.status(404).render('404', { title: 'Perro no encontrado', user: req.session.user || null });\r\n+    res.render('DetallesPerros', { title: `Detalles de ${perro.nombre}`, user: req.session.user || null, perro });\r\n+  } catch {\r\n+    res.status(500).render('DetallesPerros', { title: 'Error al cargar detalles', user: req.session.user || null, perro: null, error: 'No se pudieron cargar los detalles.' });\r\n   }\r\n });\r\n \r\n-// RUTA PARA FORMULARIO DE DONACIONES\r\n-app.get('/formulariodonaciones', (req, res) => {\r\n-  res.render('FormularioDonaciones', {\r\n-    title: 'Formulario de Donaciones',\r\n-    user: req.session.user || null,\r\n-    error: null,\r\n-    success: null,\r\n-    formData: {}\r\n-  });\r\n+// Formulario donaciones\r\n+app.get('/FormularioDonaciones', (req, res) => {\r\n+  res.render('FormularioDonaciones', { title: 'Formulario de Donaciones', user: req.session.user || null, error: null, success: null, formData: {} });\r\n });\r\n \r\n-// RUTA PARA GUARDAR DONACIONES EN LA BASE DE DATOS\r\n app.post('/donaciones/guardar', async (req, res) => {\r\n-  const {\r\n-    tipo_donacion,\r\n-    monto,\r\n-    descripcion,\r\n-    nombre_material,\r\n-    cantidad_material,\r\n-    id_usuario\r\n-  } = req.body;\r\n-\r\n+  const { tipo_donacion, monto, descripcion, nombre_material, cantidad_material, id_usuario } = req.body;\r\n   try {\r\n     if (tipo_donacion === 'economica') {\r\n-      if (!monto || monto <= 0) {\r\n-        return res.render('FormularioDonaciones', {\r\n-          title: 'Formulario de Donaciones',\r\n-          user: req.session.user || null,\r\n-          error: 'Por favor, ingresa un monto v\\u00e1lido mayor a 0 para la donaci\\u00f3n econ\\u00f3mica.',\r\n-          success: null,\r\n-          formData: req.body\r\n-        });\r\n-      }\r\n-\r\n-      await query(\r\n-        `INSERT INTO donaciones (tipo_donacion, monto, id_usuario)\r\n-         VALUES (?, ?, ?)`,\r\n-        [tipo_donacion, monto, id_usuario]\r\n-      );\r\n+      if (!monto || monto <= 0) throw new Error('Monto invÃ¡lido');\r\n+      await query(`INSERT INTO donaciones (tipo_donacion, monto, id_usuario) VALUES (?, ?, ?)`, [tipo_donacion, monto, id_usuario]);\r\n     } else if (tipo_donacion === 'material') {\r\n-      if (!nombre_material || nombre_material.trim() === '' || !cantidad_material || cantidad_material <= 0) {\r\n-        return res.render('FormularioDonaciones', {\r\n-          title: 'Formulario de Donaciones',\r\n-          user: req.session.user || null,\r\n-          error: 'Por favor, completa el nombre del material y una cantidad v\\u00e1lida mayor a 0.',\r\n-          success: null,\r\n-          formData: req.body\r\n-        });\r\n-      }\r\n-\r\n-      await query(\r\n-        `INSERT INTO donaciones (tipo_donacion, descripcion, nombre_material, cantidad_material, id_usuario)\r\n-         VALUES (?, ?, ?, ?, ?)`,\r\n-        [tipo_donacion, descripcion || '', nombre_material, cantidad_material, id_usuario]\r\n-      );\r\n+      if (!nombre_material || !cantidad_material || cantidad_material <= 0) throw new Error('Datos invÃ¡lidos');\r\n+      await query(`INSERT INTO donaciones (tipo_donacion, descripcion, nombre_material, cantidad_material, id_usuario) VALUES (?, ?, ?, ?, ?)`, [tipo_donacion, descripcion || '', nombre_material, cantidad_material, id_usuario]);\r\n     } else {\r\n\\ No newline at end of file\n-      return res.render('FormularioDonaciones', {\r\n-        title: 'Formulario de Donaciones',\r\n-        user: req.session.user || null,\r\n-        error: 'Tipo de donaci\\u00f3n inv\\u00e1lido.',\r\n-        success: null,\r\n-        formData: req.body\r\n-      });\r\n+      throw new Error('Tipo de donaciÃ³n invÃ¡lido');\r\n     }\r\n-\r\n-    return res.render('FormularioDonaciones', {\r\n-      title: 'Formulario de Donaciones',\r\n-      user: req.session.user || null,\r\n-      error: null,\r\n-      success: 'Donaci\\u00f3n guardada con \\u00e9xito. \\u00a1Gracias por tu generosidad!',\r\n-      formData: {}\r\n-    });\r\n+    res.render('FormularioDonaciones', { title: 'Formulario de Donaciones', user: req.session.user || null, error: null, success: 'DonaciÃ³n guardada con Ã©xito. Â¡Gracias!', formData: {} });\r\n   } catch (err) {\r\n-    console.error('Error al guardar la donaci\\u00f3n:', err);\r\n-    return res.render('FormularioDonaciones', {\r\n-      title: 'Formulario de Donaciones',\r\n-      user: req.session.user || null,\r\n-      error: 'Hubo un error al procesar la donaci\\u00f3n. Por favor, intenta nuevamente.',\r\n-      success: null,\r\n-      formData: req.body\r\n-    });\r\n+    res.render('FormularioDonaciones', { title: 'Formulario de Donaciones', user: req.session.user || null, error: err.message || 'Error procesando la donaciÃ³n.', success: null, formData: req.body });\r\n   }\r\n });\r\n \r\n-// ============================\r\n-// RUTA 404 - Paguina No Encontrada\r\n-// ============================\r\n+// 404\r\n app.use((req, res) => {\r\n-  res.status(404).render('404', {\r\n-    title: 'P\\u00e1gina no encontrada',\r\n-    user: req.session.user || null\r\n-  });\r\n+  res.status(404).render('404', { title: 'PÃ¡gina no encontrada', user: req.session.user || null });\r\n });\r\n \r\n-// ============================\r\n-// INICIAR SERVIDOR\r\n-// ============================\r\n+// Servidor\r\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n   console.log(`Servidor escuchando en http://localhost:${PORT}`);\r\n-});\n+});\r\n"
                },
                {
                    "date": 1748450924780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,15 @@\n+// ============================\r\n+// ð¦ IMPORTACIONES Y CONFIGURACIÃN INICIAL\r\n+// ============================\r\n const express = require('express');\r\n const path = require('path');\r\n const mysql = require('mysql2');\r\n const session = require('express-session');\r\n \r\n-// ConfiguraciÃ³n BD\r\n+// ============================\r\n+// âï¸ CONFIGURACIÃN DE BASE DE DATOS\r\n+// ============================\r\n const pool = mysql.createPool({\r\n   host: process.env.DB_HOST || 'localhost',\r\n   user: process.env.DB_USER || 'root',\r\n   password: process.env.DB_PASSWORD || '',\r\n@@ -18,9 +23,11 @@\n function query(sql, params = []) {\r\n   return pool.promise().query(sql, params).then(([results]) => results);\r\n }\r\n \r\n-// Funciones usuario\r\n+// ============================\r\n+// ð FUNCIONES DE USUARIO\r\n+// ============================\r\n async function verificarCorreo(correo) {\r\n   const usuarios = await query('SELECT * FROM usuarios WHERE correo = ?', [correo]);\r\n   return usuarios.length > 0;\r\n }\r\n@@ -36,8 +43,11 @@\n   const usuarios = await query('SELECT * FROM usuarios WHERE correo = ? AND password = ?', [correo, password]);\r\n   return usuarios.length ? usuarios[0] : null;\r\n }\r\n \r\n+// ============================\r\n+// ð CONFIGURACIÃN DEL SERVIDOR\r\n+// ============================\r\n const app = express();\r\n \r\n app.set('view engine', 'ejs');\r\n app.set('views', path.join(__dirname, 'views'));\r\n@@ -47,14 +57,18 @@\n \r\n app.use(session({\r\n   secret: 'clave_secreta_segura',\r\n   resave: false,\r\n-  saveUninitialized: false\r\n+  saveUninitialized: false,\r\n }));\r\n \r\n-// Rutas\r\n+// ============================\r\n+// ð RUTAS PÃBLICAS Y DE AUTENTICACIÃN\r\n+// ============================\r\n \r\n-app.get('/', (req, res) => res.redirect('/bienvenido'));\r\n+app.get('/', (req, res) => {\r\n+  res.redirect('/bienvenido');\r\n+});\r\n \r\n app.get('/bienvenido', (req, res) => {\r\n   if (!req.session.user) return res.redirect('/login');\r\n   res.render('Bienvenido', { title: 'Bienvenido', user: req.session.user });\r\n@@ -66,19 +80,21 @@\n \r\n app.post('/login', async (req, res) => {\r\n   const { correo, password } = req.body;\r\n   if (!correo || !password) {\r\n-    return res.render('Login', { title: 'Login', error: 'Completa todos los campos.', success: null });\r\n+    return res.render('Login', { title: 'Login', error: 'Por favor, completa todos los campos.', success: null });\r\n   }\r\n+\r\n   try {\r\n     const usuario = await loginUsuario(correo, password);\r\n     if (usuario) {\r\n       req.session.user = usuario;\r\n       return res.redirect('/menu');\r\n     }\r\n-    res.render('Login', { title: 'Login', error: 'Usuario no registrado.', success: null });\r\n-  } catch {\r\n-    res.render('Login', { title: 'Login', error: 'Error del servidor.', success: null });\r\n+    res.render('Login', { title: 'Login', error: 'Usuario no registrado o contraseÃ±a incorrecta.', success: null });\r\n+  } catch (err) {\r\n+    console.error('Error login:', err);\r\n+    res.render('Login', { title: 'Login', error: 'Error del servidor. Intenta mÃ¡s tarde.', success: null });\r\n   }\r\n });\r\n \r\n app.get('/registro', (req, res) => {\r\n@@ -87,76 +103,97 @@\n \r\n app.post('/registro', async (req, res) => {\r\n   const { nombre, direccion, telefono, correo, password } = req.body;\r\n   if (!nombre || !direccion || !telefono || !correo || !password) {\r\n-    return res.render('crearCuenta', { title: 'Registro', error: 'Completa todos los campos.' });\r\n+    return res.render('crearCuenta', { title: 'Registro', error: 'Por favor, completa todos los campos.' });\r\n   }\r\n+\r\n   try {\r\n     if (await verificarCorreo(correo)) {\r\n-      return res.render('crearCuenta', { title: 'Registro', error: 'Correo ya registrado.' });\r\n+      return res.render('crearCuenta', { title: 'Registro', error: 'Este correo ya estÃ¡ registrado.' });\r\n     }\r\n     await registrarUsuario({ nombre, direccion, telefono, correo, password });\r\n     req.session.user = await loginUsuario(correo, password);\r\n     res.redirect('/menu');\r\n-  } catch {\r\n-    res.render('crearCuenta', { title: 'Registro', error: 'Error en el servidor.' });\r\n+  } catch (err) {\r\n+    console.error('Error registro:', err);\r\n+    res.render('crearCuenta', { title: 'Registro', error: 'Error en el servidor. IntÃ©ntalo mÃ¡s tarde.' });\r\n   }\r\n });\r\n \r\n-app.get('/menu', (req, res) => {\r\n-  if (!req.session.user) return res.redirect('/login?error=Debes iniciar sesiÃ³n primero');\r\n-  res.render('menu', { title: 'MenÃº Principal', user: req.session.user });\r\n-});\r\n-\r\n app.get('/logout', (req, res) => {\r\n   req.session.destroy(() => res.redirect('/login'));\r\n });\r\n \r\n-app.get('/acerca_del_albergue', (req, res) => {\r\n-  res.render('AcercaDelAlbergue', { title: 'Acerca del Albergue', user: req.session.user || null });\r\n+// ============================\r\n+// ð RUTAS PROTEGIDAS CON SESIÃN\r\n+// ============================\r\n+\r\n+function requireLogin(req, res, next) {\r\n+  if (!req.session.user) return res.redirect('/login?error=Debes+iniciar+sesiÃ³n+primero');\r\n+  next();\r\n+}\r\n+\r\n+app.get('/menu', requireLogin, (req, res) => {\r\n+  res.render('menu', { title: 'MenÃº Principal', user: req.session.user });\r\n });\r\n \r\n-app.get('/infoAdopciones', (req, res) => {\r\n-  res.render('InfoAdopciones', { title: 'InformaciÃ³n sobre Adopciones', user: req.session.user || null });\r\n+app.get('/acerca_del_albergue', requireLogin, (req, res) => {\r\n+  res.render('AcercaDelAlbergue', { title: 'Acerca del Albergue', user: req.session.user });\r\n });\r\n \r\n-app.get('/infoDonaciones', (req, res) => {\r\n-  res.render('InfoDonaciones', { title: 'InformaciÃ³n sobre Donaciones', user: req.session.user || null });\r\n+app.get('/infoAdopciones', requireLogin, (req, res) => {\r\n+  res.render('InfoAdopciones', { title: 'InformaciÃ³n sobre Adopciones', user: req.session.user });\r\n });\r\n \r\n-// Formulario Reportes\r\n-app.get('/FormularioReportes', (req, res) => {\r\n-  res.render('FormularioReportes', { title: 'Formulario de Reportes', user: req.session.user || null, error: null, success: null, formData: {} });\r\n+app.get('/infoDonaciones', requireLogin, (req, res) => {\r\n+  res.render('InfoDonaciones', { title: 'InformaciÃ³n sobre Donaciones', user: req.session.user });\r\n });\r\n \r\n-// Lista perros\r\n-app.get('/perros', async (req, res) => {\r\n+// ============================\r\n+// ð¶ RUTAS RELACIONADAS CON PERROS\r\n+// ============================\r\n+\r\n+app.get('/perros', requireLogin, async (req, res) => {\r\n   try {\r\n     const perros = await query('SELECT * FROM perros');\r\n-    res.render('Perros', { title: 'Nuestros Perros', user: req.session.user || null, perros });\r\n-  } catch {\r\n-    res.status(500).render('Perros', { title: 'Nuestros Perros', user: req.session.user || null, perros: [], error: 'No se pudieron cargar los perros.' });\r\n+    res.render('Perros', { title: 'Nuestros Perros', user: req.session.user, perros });\r\n+  } catch (err) {\r\n+    console.error('Error al obtener perros:', err);\r\n+    res.status(500).render('Perros', { title: 'Nuestros Perros', user: req.session.user, perros: [], error: 'No se pudieron cargar los perros.' });\r\n   }\r\n });\r\n \r\n-// Detalles perro\r\n-app.get('/perros/:id', async (req, res) => {\r\n+app.get('/perros/:id', requireLogin, async (req, res) => {\r\n   try {\r\n     const [perro] = await query('SELECT * FROM perros WHERE id = ?', [req.params.id]);\r\n-    if (!perro) return res.status(404).render('404', { title: 'Perro no encontrado', user: req.session.user || null });\r\n-    res.render('DetallesPerros', { title: `Detalles de ${perro.nombre}`, user: req.session.user || null, perro });\r\n-  } catch {\r\n-    res.status(500).render('DetallesPerros', { title: 'Error al cargar detalles', user: req.session.user || null, perro: null, error: 'No se pudieron cargar los detalles.' });\r\n+    if (!perro) return res.status(404).render('404', { title: 'Perro no encontrado', user: req.session.user });\r\n+    res.render('DetallesPerros', { title: `Detalles de ${perro.nombre}`, user: req.session.user, perro });\r\n+  } catch (err) {\r\n+    console.error('Error detalles perro:', err);\r\n+    res.status(500).render('DetallesPerros', { title: 'Error al cargar detalles', user: req.session.user, perro: null, error: 'No se pudieron cargar los detalles.' });\r\n   }\r\n });\r\n \r\n-// Formulario donaciones\r\n-app.get('/FormularioDonaciones', (req, res) => {\r\n-  res.render('FormularioDonaciones', { title: 'Formulario de Donaciones', user: req.session.user || null, error: null, success: null, formData: {} });\r\n+// ============================\r\n+// ð FORMULARIO DE REPORTES (con nombre respetado)\r\n+// ============================\r\n+\r\n+app.get('/FormularioReportes', requireLogin, (req, res) => {\r\n+  res.render('FormularioReportes', { title: 'Formulario de Reportes', user: req.session.user, error: null, success: null, formData: {} });\r\n });\r\n \r\n-app.post('/donaciones/guardar', async (req, res) => {\r\n+// ============================\r\n+// ð° FORMULARIO Y PROCESO DE DONACIONES\r\n+// ============================\r\n+\r\n+app.get('/FormularioDonaciones', requireLogin, (req, res) => {\r\n+  res.render('FormularioDonaciones', { title: 'Formulario de Donaciones', user: req.session.user, error: null, success: null, formData: {} });\r\n+});\r\n+\r\n+app.post('/donaciones/guardar', requireLogin, async (req, res) => {\r\n   const { tipo_donacion, monto, descripcion, nombre_material, cantidad_material, id_usuario } = req.body;\r\n+\r\n   try {\r\n     if (tipo_donacion === 'economica') {\r\n       if (!monto || monto <= 0) throw new Error('Monto invÃ¡lido');\r\n       await query(`INSERT INTO donaciones (tipo_donacion, monto, id_usuario) VALUES (?, ?, ?)`, [tipo_donacion, monto, id_usuario]);\r\n@@ -165,20 +202,36 @@\n       await query(`INSERT INTO donaciones (tipo_donacion, descripcion, nombre_material, cantidad_material, id_usuario) VALUES (?, ?, ?, ?, ?)`, [tipo_donacion, descripcion || '', nombre_material, cantidad_material, id_usuario]);\r\n     } else {\r\n       throw new Error('Tipo de donaciÃ³n invÃ¡lido');\r\n     }\r\n-    res.render('FormularioDonaciones', { title: 'Formulario de Donaciones', user: req.session.user || null, error: null, success: 'DonaciÃ³n guardada con Ã©xito. Â¡Gracias!', formData: {} });\r\n+\r\n+    res.render('FormularioDonaciones', { title: 'Formulario de Donaciones', user: req.session.user, error: null, success: 'DonaciÃ³n guardada con Ã©xito. Â¡Gracias!', formData: {} });\r\n   } catch (err) {\r\n-    res.render('FormularioDonaciones', { title: 'Formulario de Donaciones', user: req.session.user || null, error: err.message || 'Error procesando la donaciÃ³n.', success: null, formData: req.body });\r\n+    res.render('FormularioDonaciones', { title: 'Formulario de Donaciones', user: req.session.user, error: err.message || 'Error procesando la donaciÃ³n.', success: null, formData: req.body });\r\n   }\r\n });\r\n \r\n-// 404\r\n+// ============================\r\n+// ð« PÃGINA 404 PARA RUTAS NO ENCONTRADAS\r\n+// ============================\r\n+\r\n app.use((req, res) => {\r\n   res.status(404).render('404', { title: 'PÃ¡gina no encontrada', user: req.session.user || null });\r\n });\r\n \r\n-// Servidor\r\n+// ============================\r\n+// ð INICIAR EL SERVIDOR\r\n+// ============================\r\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n-  console.log(`Servidor escuchando en http://localhost:${PORT}`);\r\n+  console.log(`Servidor iniciado en http://localhost:${PORT}`);\r\n });\r\n+\r\n+// ============================\r\n+// ð¤ EXPORTACIONES (si las necesitas)\r\n+// ============================\r\n+module.exports = {\r\n+  query,\r\n+  verificarCorreo,\r\n+  registrarUsuario,\r\n+  loginUsuario,\r\n+};\r\n"
                },
                {
                    "date": 1748451350496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n   next();\r\n }\r\n \r\n app.get('/menu', requireLogin, (req, res) => {\r\n-  res.render('menu', { title: 'MenÃº Principal', user: req.session.user });\r\n+  res.render('Menu', { title: 'MenÃº Principal', user: req.session.user });\r\n });\r\n \r\n app.get('/acerca_del_albergue', requireLogin, (req, res) => {\r\n   res.render('AcercaDelAlbergue', { title: 'Acerca del Albergue', user: req.session.user });\r\n@@ -148,8 +148,13 @@\n app.get('/infoDonaciones', requireLogin, (req, res) => {\r\n   res.render('InfoDonaciones', { title: 'InformaciÃ³n sobre Donaciones', user: req.session.user });\r\n });\r\n \r\n+// NUEVA RUTA AGREGADA PARA INFO REPORTES\r\n+app.get('/infoReportes', requireLogin, (req, res) => {\r\n+  res.render('InfoReportes', { title: 'InformaciÃ³n sobre Reportes', user: req.session.user });\r\n+});\r\n+\r\n // ============================\r\n // ð¶ RUTAS RELACIONADAS CON PERROS\r\n // ============================\r\n \r\n@@ -233,5 +238,5 @@\n   query,\r\n   verificarCorreo,\r\n   registrarUsuario,\r\n   loginUsuario,\r\n-};\n\\ No newline at end of file\n+};\r\n"
                },
                {
                    "date": 1748451512226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,12 +69,12 @@\n   res.redirect('/bienvenido');\r\n });\r\n \r\n app.get('/bienvenido', (req, res) => {\r\n-  if (!req.session.user) return res.redirect('/login');\r\n-  res.render('Bienvenido', { title: 'Bienvenido', user: req.session.user });\r\n+  res.render('Bienvenido', { title: 'Bienvenido', user: req.session.user || null });\r\n });\r\n \r\n+\r\n app.get('/login', (req, res) => {\r\n   res.render('Login', { title: 'Login', error: null, success: req.query.success || null });\r\n });\r\n \r\n"
                }
            ],
            "date": 1748449876827,
            "name": "Commit-0",
            "content": "// ============================\r\n// \\ud83d\\udce6 IMPORTACIONES Y CONFIGURACI\\u00d3N INICIAL\r\n// ============================\r\nconst express = require('express');\r\nconst path = require('path');\r\nconst mysql = require('mysql2');\r\nconst session = require('express-session');\r\n\r\n// ============================\r\n// \\u2699\\ufe0f CONFIGURACI\\u00d3N DE BASE DE DATOS\r\n// ============================\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || '',\r\n  database: process.env.DB_NAME || 'albergue',\r\n  charset: 'utf8mb4',\r\n  connectionLimit: 10,\r\n  waitForConnections: true,\r\n  queueLimit: 0,\r\n});\r\n\r\npool.on('error', (err) => {\r\n  console.error('Error en la conexi\\u00f3n a la base de datos:', err.code, err.message);\r\n});\r\n\r\nfunction query(sql, params = []) {\r\n  return pool.promise().query(sql, params)\r\n    .then(([results]) => results)\r\n    .catch((err) => {\r\n      console.error('Error en consulta SQL:', err.message);\r\n      throw err;\r\n    });\r\n}\r\n\r\n// ============================\r\n// \\ud83d\\udccb FUNCIONES DE USUARIO\r\n// ============================\r\nasync function verificarCorreo(correo) {\r\n  const usuarios = await query('SELECT * FROM usuarios WHERE correo = ?', [correo]);\r\n  return usuarios.length > 0;\r\n}\r\n\r\nasync function registrarUsuario({ nombre, direccion, telefono, correo, password }) {\r\n  await query(\r\n    `INSERT INTO usuarios (nombre, direccion, telefono, correo, password)\r\n     VALUES (?, ?, ?, ?, ?)`,\r\n    [nombre, direccion, telefono, correo, password]\r\n  );\r\n}\r\n\r\nasync function loginUsuario(correo, password) {\r\n  const usuarios = await query('SELECT * FROM usuarios WHERE correo = ? AND password = ?', [correo, password]);\r\n  return usuarios.length > 0 ? usuarios[0] : null;\r\n}\r\n\r\n// ============================\r\n// \\ud83d\\ude80 CREACI\\u00d3N DEL SERVIDOR\r\n// ============================\r\nconst app = express();\r\n\r\napp.set('view engine', 'ejs');\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.use(express.static(path.join(__dirname, 'public')));\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.json());\r\n\r\napp.use(session({\r\n  secret: 'clave_secreta_segura',\r\n  resave: false,\r\n  saveUninitialized: false\r\n}));\r\n\r\n// ============================\r\n// \\ud83d\\udd01 RUTAS\r\n// ============================\r\n\r\n// RUTA RA\\u00cdZ: SIEMPRE REDIRIGE A BIENVENIDO\r\napp.get('/', (req, res) => {\r\n  res.redirect('/bienvenido');\r\n});\r\n\r\n// RUTA DE BIENVENIDA: MUESTRA OPCIONES BASADAS EN AUTENTICACI\\u00d3N\r\napp.get('/bienvenido', (req, res) => {\r\n  res.render('Bienvenido', {\r\n    title: 'Bienvenido',\r\n    user: req.session.user || null,\r\n  });\r\n});\r\n\r\napp.get('/bienvenido', (req, res) => {\r\n  if (!req.session.user) {\r\n    return res.redirect('/login');\r\n  }\r\n  res.render('Bienvenido', {\r\n    title: 'Bienvenido',\r\n    user: req.session.user\r\n  });\r\n});\r\n\r\napp.get('/login', (req, res) => {\r\n  res.render('Login', {\r\n    title: 'Login',\r\n    error: null,\r\n    success: req.query.success || null\r\n  });\r\n});\r\n\r\napp.post('/login', async (req, res) => {\r\n  const { correo, password } = req.body;\r\n\r\n  if (!correo || !password) {\r\n    return res.render('Login', {\r\n      title: 'Login',\r\n      error: 'Por favor, completa todos los campos.',\r\n      success: null\r\n    });\r\n  }\r\n\r\n  try {\r\n    const usuario = await loginUsuario(correo, password);\r\n    if (usuario) {\r\n      req.session.user = usuario;\r\n      return res.redirect('/menu');\r\n    } else {\r\n      return res.render('Login', {\r\n        title: 'Login',\r\n        error: 'El usuario no est\\u00e1 registrado. Por favor, reg\\u00edstrate.',\r\n        success: null\r\n      });\r\n    }\r\n  } catch (err) {\r\n    console.error('Error en login:', err);\r\n    return res.render('Login', {\r\n      title: 'Login',\r\n      error: 'Error del servidor. Intenta m\\u00e1s tarde.',\r\n      success: null\r\n    });\r\n  }\r\n});\r\n\r\napp.get('/registro', (req, res) => {\r\n  res.render('crearCuenta', {\r\n    title: 'Registro',\r\n    error: null\r\n  });\r\n});\r\n\r\napp.post('/registro', async (req, res) => {\r\n  const { nombre, direccion, telefono, correo, password } = req.body;\r\n\r\n  if (!nombre || !direccion || !telefono || !correo || !password) {\r\n    return res.render('crearCuenta', {\r\n      title: 'Registro',\r\n      error: 'Por favor, completa todos los campos.'\r\n    });\r\n  }\r\n\r\n  try {\r\n    const existe = await verificarCorreo(correo);\r\n    if (existe) {\r\n      return res.render('crearCuenta', {\r\n        title: 'Registro',\r\n        error: 'Este correo ya est\\u00e1 registrado.'\r\n      });\r\n    }\r\n\r\n    await registrarUsuario({ nombre, direccion, telefono, correo, password });\r\n\r\n    const nuevoUsuario = await loginUsuario(correo, password);\r\n    req.session.user = nuevoUsuario;\r\n\r\n    return res.redirect('/menu');\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.render('crearCuenta', {\r\n      title: 'Registro',\r\n      error: 'Error en el servidor. Int\\u00e9ntalo m\\u00e1s tarde.'\r\n    });\r\n  }\r\n});\r\n\r\napp.get('/menu', (req, res) => {\r\n  if (!req.session.user) {\r\n    return res.redirect('/login?error=Debes+iniciar+sesion+primero');\r\n  }\r\n\r\n  res.render('menu', {\r\n    title: 'Men\\u00fa Principal',\r\n    user: req.session.user\r\n  });\r\n});\r\n\r\napp.get('/logout', (req, res) => {\r\n  req.session.destroy(() => {\r\n    res.redirect('/login');\r\n  });\r\n});\r\n\r\napp.get('/acerca_del_albergue', (req, res) => {\r\n  res.render('AcercaDelAlbergue', {\r\n    title: 'Acerca del Albergue',\r\n    user: req.session.user || null\r\n  });\r\n});\r\n\r\napp.get('/infoAdopcion', (req, res) => {\r\n  res.render('InfoAdopcion', {\r\n    title: 'Informaci\\u00f3n sobre Adopciones',\r\n    user: req.session.user || null\r\n  });\r\n});\r\n\r\napp.get('/infoDonaciones', (req, res) => {\r\n  res.render('InfoDonaciones', {\r\n    title: 'Informaci\\u00f3n sobre Donaciones',\r\n    user: req.session.user || null\r\n  });\r\n});\r\n\r\n// MOSTRAR FORMULARIO DE REPORTE\r\napp.get('/FormularioReporte', (req, res) => {\r\n  res.render('FormularioReporte', {\r\n    title: 'Formulario de Reportes',\r\n    user: req.session.user || null,\r\n    error: null,\r\n    success: null,\r\n    formData: {}\r\n  });\r\n});\r\n\r\n// RUTA PARA MOSTRAR LOS PERROS DESDE LA BASE DE DATOS\r\napp.get('/perros', async (req, res) => {\r\n  try {\r\n    const perros = await query('SELECT * FROM perros');\r\n\r\n    res.render('Perros', {\r\n      title: 'Nuestros Perros',\r\n      user: req.session.user || null,\r\n      perros\r\n    });\r\n  } catch (err) {\r\n    console.error('Error al obtener los perros:', err);\r\n    res.status(500).render('Perros', {\r\n      title: 'Nuestros Perros',\r\n      user: req.session.user || null,\r\n      perros: [],\r\n      error: 'No se pudieron cargar los perros.'\r\n    });\r\n  }\r\n});\r\n\r\n// RUTA PARA MOSTRAR DETALLES DE UN PERRO EN DETALLESPERROS.EJS\r\napp.get('/perros/:id', async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    const [perro] = await query('SELECT * FROM perros WHERE id = ?', [id]);\r\n\r\n    if (!perro) {\r\n      return res.status(404).render('404', {\r\n        title: 'Perro no encontrado',\r\n        user: req.session.user || null\r\n      });\r\n    }\r\n\r\n    res.render('DetallesPerros', {\r\n      title: `Detalles de ${perro.nombre}`,\r\n      user: req.session.user || null,\r\n      perro\r\n    });\r\n  } catch (err) {\r\n    console.error('Error al obtener detalles del perro:', err);\r\n    res.status(500).render('DetallesPerros', {\r\n      title: 'Error al cargar detalles',\r\n      user: req.session.user || null,\r\n      perro: null,\r\n      error: 'No se pudieron cargar los detalles del perro.'\r\n    });\r\n  }\r\n});\r\n\r\n// RUTA PARA FORMULARIO DE DONACIONES\r\napp.get('/formulariodonaciones', (req, res) => {\r\n  res.render('FormularioDonaciones', {\r\n    title: 'Formulario de Donaciones',\r\n    user: req.session.user || null,\r\n    error: null,\r\n    success: null,\r\n    formData: {}\r\n  });\r\n});\r\n\r\n// RUTA PARA GUARDAR DONACIONES EN LA BASE DE DATOS\r\napp.post('/donaciones/guardar', async (req, res) => {\r\n  const {\r\n    tipo_donacion,\r\n    monto,\r\n    descripcion,\r\n    nombre_material,\r\n    cantidad_material,\r\n    id_usuario\r\n  } = req.body;\r\n\r\n  try {\r\n    if (tipo_donacion === 'economica') {\r\n      if (!monto || monto <= 0) {\r\n        return res.render('FormularioDonaciones', {\r\n          title: 'Formulario de Donaciones',\r\n          user: req.session.user || null,\r\n          error: 'Por favor, ingresa un monto v\\u00e1lido mayor a 0 para la donaci\\u00f3n econ\\u00f3mica.',\r\n          success: null,\r\n          formData: req.body\r\n        });\r\n      }\r\n\r\n      await query(\r\n        `INSERT INTO donaciones (tipo_donacion, monto, id_usuario)\r\n         VALUES (?, ?, ?)`,\r\n        [tipo_donacion, monto, id_usuario]\r\n      );\r\n    } else if (tipo_donacion === 'material') {\r\n      if (!nombre_material || nombre_material.trim() === '' || !cantidad_material || cantidad_material <= 0) {\r\n        return res.render('FormularioDonaciones', {\r\n          title: 'Formulario de Donaciones',\r\n          user: req.session.user || null,\r\n          error: 'Por favor, completa el nombre del material y una cantidad v\\u00e1lida mayor a 0.',\r\n          success: null,\r\n          formData: req.body\r\n        });\r\n      }\r\n\r\n      await query(\r\n        `INSERT INTO donaciones (tipo_donacion, descripcion, nombre_material, cantidad_material, id_usuario)\r\n         VALUES (?, ?, ?, ?, ?)`,\r\n        [tipo_donacion, descripcion || '', nombre_material, cantidad_material, id_usuario]\r\n      );\r\n    } else {\r\n      return res.render('FormularioDonaciones', {\r\n        title: 'Formulario de Donaciones',\r\n        user: req.session.user || null,\r\n        error: 'Tipo de donaci\\u00f3n inv\\u00e1lido.',\r\n        success: null,\r\n        formData: req.body\r\n      });\r\n    }\r\n\r\n    return res.render('FormularioDonaciones', {\r\n      title: 'Formulario de Donaciones',\r\n      user: req.session.user || null,\r\n      error: null,\r\n      success: 'Donaci\\u00f3n guardada con \\u00e9xito. \\u00a1Gracias por tu generosidad!',\r\n      formData: {}\r\n    });\r\n  } catch (err) {\r\n    console.error('Error al guardar la donaci\\u00f3n:', err);\r\n    return res.render('FormularioDonaciones', {\r\n      title: 'Formulario de Donaciones',\r\n      user: req.session.user || null,\r\n      error: 'Hubo un error al procesar la donaci\\u00f3n. Por favor, intenta nuevamente.',\r\n      success: null,\r\n      formData: req.body\r\n    });\r\n  }\r\n});\r\n\r\n// ============================\r\n// \\ud83d\\uded1 RUTA 404 - P\\u00c1GINA NO ENCONTRADA\r\n// ============================\r\napp.use((req, res) => {\r\n  res.status(404).render('404', {\r\n    title: 'P\\u00e1gina no encontrada',\r\n    user: req.session.user || null\r\n  });\r\n});\r\n\r\n// ============================\r\n// \\ud83d\\udcbb INICIAR SERVIDOR\r\n// ============================\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Servidor escuchando en http://localhost:${PORT}`);\r\n});"
        }
    ]
}